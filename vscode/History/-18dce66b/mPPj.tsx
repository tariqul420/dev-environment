"use client";

import { Bot, Download, Globe, Link as LinkIcon, Plus, Trash2, Wand2 } from "lucide-react";
import * as React from "react";
import {
  ActionButton,
  CopyButton,
  ExportTextButton,
  ResetButton,
} from "@/components/shared/action-buttons";
import InputField from "@/components/shared/form-fields/input-field";
import SelectField from "@/components/shared/form-fields/select-field";
import SwitchRow from "@/components/shared/form-fields/switch-row";
import TextareaField from "@/components/shared/form-fields/textarea-field";
import ToolPageHeader from "@/components/shared/tool-page-header";
import { Badge } from "@/components/ui/badge";
import { CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { GlassCard } from "@/components/ui/glass-card";
import { Label } from "@/components/ui/label";
import { Separator } from "@/components/ui/separator";

/* Types */
type Rule = { id: string; path: string; allow: boolean };
type Agent = {
  id: string;
  name: string;
  rules: Rule[];
  crawlDelay?: number | "";
  cleanParams: string[];
};

type State = {
  // Global
  host: string;
  sitemaps: string[];
  comment: string;
  customDirectives: string;
  agents: Agent[];
  pretty: boolean;
};

/* Helpers */
const uid = () => Math.random().toString(36).slice(2, 9);

function trimSlash(s: string) {
  const x = s.trim();
  return x.startsWith("/") || x === "" ? x : `/${x}`;
}

function genRobots(s: State) {
  const lines: string[] = [];

  if (s.comment.trim()) {
    const comments = s.comment
      .split(/\r?\n/)
      .map((l) => l.trim())
      .filter(Boolean)
      .map((l) => `# ${l}`);

    if (comments.length) {
      lines.push(...comments, "");
    }
  }

  // Agents
  s.agents.forEach((ag, i) => {
    const name = ag.name.trim() || "*";
    lines.push(`User-agent: ${name}`);

    const allowLines: string[] = [];
    const disallowLines: string[] = [];

    ag.rules.forEach((r) => {
      const p = trimSlash(r.path);
      if (!p && r.allow) return;
      if (!p && !r.allow) return;
      if (r.allow)
        if (r.allow) allowLines.push(`Allow: ${p}`);
        else disallowLines.push(`Disallow: ${p}`);
    });

    if (allowLines.length === 0 && disallowLines.length === 0) {
      lines.push("Disallow:");
    } else {
      lines.push(...disallowLines, ...allowLines);
    }

    if (ag.crawlDelay !== "" && ag.crawlDelay != null) {
      lines.push(`Crawl-delay: ${ag.crawlDelay}`);
    }

    // Clean-param (legacy)
    ag.cleanParams
      .map((p) => p.trim())
      .filter(Boolean)
      .forEach((p) => {
        lines.push(`Clean-param: ${p} /`);
      });

    if (i < s.agents.length - 1) lines.push("");
  });

  // Global Host
  if (s.host.trim()) {
    if (lines.length && lines.at(-1) !== "") lines.push("");
    lines.push(`Host: ${s.host.trim()}`);
  }

  // Sitemaps
  const sm = s.sitemaps.map((u) => u.trim()).filter(Boolean);
  if (sm.length) {
    if (lines.length && lines.at(-1) !== "") lines.push("");
    lines.push(...sm.map((u) => `Sitemap: ${u}`));
  }

  // Custom directives
  const custom = s.customDirectives
    .split(/\r?\n/)
    .map((l) => l.trim())
    .filter(Boolean);
  if (custom.length) {
    if (lines.length && lines.at(-1) !== "") lines.push("");
    lines.push(...custom);
  }

  const out = lines.join("\n");
  return s.pretty ? `${out}\n` : out;
}

/* Defaults & Presets */
const DEFAULT_AGENT = (): Agent => ({
  id: uid(),
  name: "*",
  rules: [],
  crawlDelay: "",
  cleanParams: [],
});

const DEFAULT: State = {
  host: "",
  sitemaps: ["https://example.com/sitemap.xml"],
  comment: "robots.txt generated by Tools Hub",
  customDirectives: "",
  agents: [DEFAULT_AGENT()],
  pretty: true,
};

function applyPreset(
  name: "AllowAll" | "DisallowAll" | "Blog" | "Ecommerce" | "NextJS" | "WordPress",
): State {
  const base: State = { ...DEFAULT, agents: [DEFAULT_AGENT()] };
  const a = base.agents[0];

  switch (name) {
    case "AllowAll":
      a.rules = [];
      base.comment = "All bots allowed";
      break;
    case "DisallowAll":
      a.rules = [{ id: uid(), path: "/", allow: false }];
      base.comment = "All bots disallowed sitewide";
      break;
    case "Blog":
      a.rules = [
        { id: uid(), path: "/wp-admin/", allow: false },
        { id: uid(), path: "/wp-includes/", allow: false },
        { id: uid(), path: "/cgi-bin/", allow: false },
        { id: uid(), path: "/search", allow: false },
        { id: uid(), path: "/?s=", allow: false },
        { id: uid(), path: "/comments", allow: false },
      ];
      base.comment = "Common blog paths restricted";
      base.sitemaps = ["https://example.com/sitemap.xml", "https://example.com/post-sitemap.xml"];
      break;
    case "Ecommerce":
      a.rules = [
        { id: uid(), path: "/cart", allow: false },
        { id: uid(), path: "/checkout", allow: false },
        { id: uid(), path: "/account", allow: false },
        { id: uid(), path: "/orders", allow: false },
        { id: uid(), path: "/compare", allow: false },
        { id: uid(), path: "/wishlist", allow: false },
        { id: uid(), path: "/search", allow: false },
        { id: uid(), path: "/*?*sort=*", allow: false },
      ];
      base.comment = "E-commerce noisy URLs blocked";
      base.sitemaps = ["https://shop.example.com/sitemap.xml"];
      break;
    case "NextJS":
      a.rules = [
        { id: uid(), path: "/_next/", allow: true },
        { id: uid(), path: "/api", allow: false },
        { id: uid(), path: "/private", allow: false },
        { id: uid(), path: "/drafts", allow: false },
        { id: uid(), path: "/search", allow: false },
      ];
      base.comment = "Next.js app typical paths";
      base.sitemaps = ["https://example.com/sitemap.xml"];
      break;
    case "WordPress":
      a.rules = [
        { id: uid(), path: "/wp-admin/", allow: false },
        { id: uid(), path: "/wp-includes/", allow: false },
        { id: uid(), path: "/*?*replytocom=*", allow: false },
        { id: uid(), path: "/xmlrpc.php", allow: false },
      ];
      base.comment = "WordPress defaults";
      base.sitemaps = ["https://example.com/sitemap.xml"];
      break;
  }
  return base;
}

export default function RobotsGeneratorClient() {
  const [s, setS] = React.useState<State>(() => {
    if (typeof window !== "undefined") {
      try {
        const raw = localStorage.getItem("robots-gen-v1");
        if (raw) return { ...DEFAULT, ...JSON.parse(raw) } as State;
      } catch {}
    }
    return DEFAULT;
  });

  const output = React.useMemo(() => genRobots(s), [s]);

  React.useEffect(() => {
    localStorage.setItem("robots-gen-v1", JSON.stringify(s));
  }, [s]);

  const resetAll = React.useCallback(() => setS(DEFAULT), []);

  const addAgent = React.useCallback(() => {
    setS((p) => ({ ...p, agents: [...p.agents, DEFAULT_AGENT()] }));
  }, []);

  const removeAgent = React.useCallback((id: string) => {
    setS((p) => ({
      ...p,
      agents: p.agents.length > 1 ? p.agents.filter((a) => a.id !== id) : p.agents,
    }));
  }, []);

  const updateAgent = React.useCallback((id: string, patch: Partial<Agent>) => {
    setS((p) => ({
      ...p,
      agents: p.agents.map((a) => (a.id === id ? { ...a, ...patch } : a)),
    }));
  }, []);

  const addRule = React.useCallback(
    (agentId: string, allow = false) => {
      const agent = s.agents.find((a) => a.id === agentId);
      if (!agent) return;
      updateAgent(agentId, {
        rules: [...agent.rules, { id: uid(), path: "", allow }],
      });
    },
    [s.agents, updateAgent],
  );

  const updateRule = React.useCallback(
    (agentId: string, ruleId: string, patch: Partial<Rule>) => {
      const ag = s.agents.find((a) => a.id === agentId);
      if (!ag) return;
      updateAgent(agentId, {
        rules: ag.rules.map((r) => (r.id === ruleId ? { ...r, ...patch } : r)),
      });
    },
    [s.agents, updateAgent],
  );

  const removeRule = React.useCallback(
    (agentId: string, ruleId: string) => {
      const ag = s.agents.find((a) => a.id === agentId);
      if (!ag) return;
      updateAgent(agentId, { rules: ag.rules.filter((r) => r.id !== ruleId) });
    },
    [s.agents, updateAgent],
  );

  const addSitemap = React.useCallback(() => {
    setS((p) => ({ ...p, sitemaps: [...p.sitemaps, ""] }));
  }, []);

  const updateSitemap = React.useCallback((i: number, val: string) => {
    setS((p) => {
      const sitemaps = p.sitemaps.slice();
      sitemaps[i] = val;
      return { ...p, sitemaps };
    });
  }, []);

  const removeSitemap = React.useCallback((i: number) => {
    setS((p) => ({ ...p, sitemaps: p.sitemaps.filter((_, idx) => idx !== i) }));
  }, []);

  const commonBlocks = React.useMemo(() => ["/admin", "/api", "/search", "/cart", "/checkout"], []);

  return (
    <>
      <ToolPageHeader
        icon={Bot}
        title="robots.txt Generator"
        description="Generate a clean robots.txt with multiple user-agents, rules, sitemaps, and helpful presets."
        actions={
          <>
            <ResetButton onClick={resetAll} />
            <CopyButton disabled={!output} getText={output} />
            <ExportTextButton label="Download" filename="robots.txt" getText={() => output} />
          </>
        }
      />

      {/* Presets */}
      <GlassCard className="mb-4">
        <CardHeader className="pb-2">
          <CardTitle className="text-base">Presets</CardTitle>
          <CardDescription>Start fast, then customize below.</CardDescription>
        </CardHeader>
        <CardContent className="flex flex-wrap gap-2 items-center">
          {(
            [
              ["Allow All", "AllowAll"],
              ["Disallow All", "DisallowAll"],
              ["Blog", "Blog"],
              ["E-commerce", "Ecommerce"],
              ["Next.js", "NextJS"],
              ["WordPress", "WordPress"],
            ] as const
          ).map(([label, key]) => (
            <ActionButton
              key={key}
              icon={Wand2}
              label={label}
              onClick={() => setS(applyPreset(key))}
            />
          ))}

          <SwitchRow
            className="ml-auto"
            label="Pretty print"
            checked={s.pretty}
            onCheckedChange={(v) => setS((p) => ({ ...p, pretty: v }))}
          />
        </CardContent>
      </GlassCard>

      {/* Global settings */}
      <GlassCard>
        <CardHeader className="pb-2">
          <CardTitle className="text-base">Global</CardTitle>
          <CardDescription>Host, sitemaps, and optional comments.</CardDescription>
        </CardHeader>
        <CardContent className="grid gap-6 md:grid-cols-2">
          <div className="space-y-4">
            <InputField
              id="host"
              icon={Globe}
              label="Host (optional)"
              placeholder="example.com"
              value={s.host}
              onChange={(e) => setS((p) => ({ ...p, host: e.target.value.trim() }))}
            />

            <div className="space-y-1.5">
              <Label className="flex items-center gap-2">
                <LinkIcon className="h-4 w-4" /> Sitemaps
              </Label>
              <div className="space-y-2">
                {s.sitemaps.map((u, i) => (
                  <div key={`${u}-${i as number}`} className="flex items-center gap-2">
                    <InputField
                      id={`sm-${i}`}
                      placeholder="https://example.com/sitemap.xml"
                      value={u}
                      onChange={(e) => updateSitemap(i, e.target.value)}
                      className="flex-1"
                    />
                    <ActionButton
                      size="icon"
                      icon={Trash2}
                      variant="destructive"
                      onClick={() => removeSitemap(i)}
                    />
                  </div>
                ))}
                <ActionButton
                  icon={Plus}
                  label="Add sitemap"
                  variant="outline"
                  onClick={addSitemap}
                />
              </div>
            </div>

            <TextareaField
              id="comment"
              label="Comment (appears as # lines)"
              placeholder="robots.txt generated by Tools Hub"
              value={s.comment}
              onValueChange={(v) => setS((p) => ({ ...p, comment: v }))}
              minHeight="84px"
            />
          </div>

          <div className="space-y-4">
            <TextareaField
              id="custom"
              label="Custom directives (advanced)"
              placeholder={`# Extra rules, e.g.\nNoindex: /legacy\nUser-agent: AdsBot-Google\nDisallow: /ads-preview`}
              value={s.customDirectives}
              onValueChange={(v) => setS((p) => ({ ...p, customDirectives: v }))}
              textareaClassName="font-mono"
              minHeight="180px"
            />
            <p className="text-xs text-muted-foreground">
              These lines will be appended as-is. Use carefully.
            </p>
          </div>
        </CardContent>
      </GlassCard>

      {/* Agents & rules */}
      <GlassCard>
        <CardHeader className="pb-2">
          <CardTitle className="text-base">User-Agents & Rules</CardTitle>
          <CardDescription>
            Add allow/disallow paths, delay, and clean parameters per bot.
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-6">
          {s.agents.map((ag) => (
            <div key={ag.id} className="rounded-lg border p-4 space-y-4">
              <div className="flex items-center justify-between gap-3 flex-wrap">
                <InputField
                  label="User-agent"
                  id={`agent-${ag.id}`}
                  value={ag.name}
                  placeholder="*, Googlebot, Bingbot…"
                  onChange={(e) => updateAgent(ag.id, { name: e.target.value })}
                  className="max-w-sm"
                />

                <div className="flex items-center gap-2">
                  <ActionButton
                    label="Block common paths"
                    variant="outline"
                    onClick={() =>
                      updateAgent(ag.id, {
                        rules: [
                          ...ag.rules,
                          ...commonBlocks.map((p) => ({ id: uid(), path: p, allow: false })),
                        ],
                      })
                    }
                  />
                  <ActionButton
                    size="icon"
                    icon={Trash2}
                    variant="destructive"
                    disabled={s.agents.length === 1}
                    onClick={() => removeAgent(ag.id)}
                  />
                </div>
              </div>

              {/* Rules list */}
              <div className="rounded-md border overflow-hidden">
                <div className="grid grid-cols-12 items-center gap-2 border-b px-3 py-2 text-xs text-muted-foreground">
                  <div className="col-span-3">Type</div>
                  <div className="col-span-8">Path (supports * and $)</div>
                  <div className="col-span-1 text-right">Remove</div>
                </div>

                {ag.rules.length === 0 ? (
                  <div className="p-3 text-sm text-muted-foreground">
                    No explicit rules. This means <span className="font-medium">allow all</span> for
                    this agent (equivalent to <code>Disallow:</code>).
                  </div>
                ) : (
                  ag.rules.map((r) => (
                    <div
                      key={r.id}
                      className="grid grid-cols-12 items-center gap-2 px-3 py-2 border-t"
                    >
                      <div className="col-span-3">
                        <SelectField
                          options={[
                            { label: "Allow", value: "allow" },
                            { label: "Disallow", value: "disallow" },
                          ]}
                          value={r.allow ? "allow" : "disallow"}
                          onValueChange={(v) => updateRule(ag.id, r.id, { allow: v === "allow" })}
                        />
                      </div>
                      <div className="col-span-8">
                        <InputField
                          id={`rule-${ag.id}-${r.id}`}
                          placeholder="/admin, /search, /*.json$"
                          value={r.path}
                          onChange={(e) => updateRule(ag.id, r.id, { path: e.target.value })}
                        />
                      </div>
                      <div className="col-span-1 text-right">
                        <ActionButton
                          size="icon"
                          icon={Trash2}
                          variant="destructive"
                          onClick={() => removeRule(ag.id, r.id)}
                        />
                      </div>
                    </div>
                  ))
                )}

                <div className="flex gap-2 border-t p-3">
                  <ActionButton
                    icon={Plus}
                    label="Disallow"
                    variant="outline"
                    onClick={() => addRule(ag.id, false)}
                  />
                  <ActionButton
                    icon={Plus}
                    label="Allow"
                    variant="outline"
                    onClick={() => addRule(ag.id, true)}
                  />
                </div>
              </div>

              {/* Crawl delay & Clean param */}
              <div className="grid gap-3 sm:grid-cols-3">
                <InputField
                  id={`delay-${ag.id}`}
                  type="number"
                  label="Crawl-delay (sec)"
                  min={0}
                  value={ag.crawlDelay === "" ? "" : ag.crawlDelay}
                  onChange={(e) =>
                    updateAgent(ag.id, {
                      crawlDelay:
                        e.target.value === "" ? "" : Math.max(0, Number(e.target.value) || 0),
                    })
                  }
                />
                <div className="col-span-2">
                  <InputField
                    id={`clean-${ag.id}`}
                    label="Clean parameters (comma-separated)"
                    placeholder="utm_source, utm_medium, fbclid"
                    value={ag.cleanParams.join(", ")}
                    onChange={(e) =>
                      updateAgent(ag.id, {
                        cleanParams: e.target.value
                          .split(",")
                          .map((x) => x.trim())
                          .filter(Boolean),
                      })
                    }
                  />
                  <p className="text-xs text-muted-foreground mt-1">
                    Used by some crawlers to ignore tracking params (legacy).
                  </p>
                </div>
              </div>
            </div>
          ))}

          <div className="flex items-center justify-between">
            <ActionButton label="Add user-agent" icon={Plus} variant="outline" onClick={addAgent} />
            <div className="flex flex-wrap items-center gap-2 text-xs">
              <Badge variant="secondary" className="font-normal">
                {s.agents.length} agent(s)
              </Badge>
              <Badge variant="outline" className="font-normal">
                {output.split("\n").filter(Boolean).length} lines
              </Badge>
            </div>
          </div>
        </CardContent>
      </GlassCard>

      <Separator />

      {/* Preview */}
      <GlassCard>
        <CardHeader className="pb-2">
          <CardTitle className="text-base">Preview</CardTitle>
          <CardDescription>Review and export your robots.txt.</CardDescription>
        </CardHeader>
        <CardContent className="grid gap-6 md:grid-cols-2">
          <div className="space-y-3">
            <TextareaField
              id="preview"
              readOnly
              value={output}
              textareaClassName="min-h-[320px] text-sm"
            />
            <div className="flex flex-wrap gap-2">
              <CopyButton getText={output} />
              <ExportTextButton
                icon={Download}
                label="Download"
                filename="robots.txt"
                getText={() => output}
              />
            </div>
          </div>

          <div className="space-y-3 text-sm">
            <div className="flex items-center justify-between">
              <div className="space-y-0.5">
                <Label>Tips</Label>
                <p className="text-xs text-muted-foreground">
                  Use wildcards (<code>*</code>) and end-anchors (<code>$</code>) for patterns. Keep
                  sensitive content off the web; robots.txt is public.
                </p>
              </div>
              <Badge variant="secondary">robots.txt</Badge>
            </div>

            <div className="rounded-md border p-3">
              <ul className="list-disc pl-5 space-y-1 text-muted-foreground">
                <li>
                  <span className="text-foreground">Disallow</span> prevents compliant bots from
                  crawling; it doesn’t hide URLs.
                </li>
                <li>
                  Place robots.txt at the root: <code>https://your-domain.com/robots.txt</code>.
                </li>
                <li>
                  Add <code>Sitemap:</code> lines for each sitemap URL (XML index or individual
                  files).
                </li>
                <li>
                  Prefer <code>Allow:</code> exceptions before broad <code>Disallow</code> patterns
                  for clarity.
                </li>
                <li>Test with Google Search Console’s robots tester where available.</li>
              </ul>
            </div>
          </div>
        </CardContent>
      </GlassCard>
    </>
  );
}

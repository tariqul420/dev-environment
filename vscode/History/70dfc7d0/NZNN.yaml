networks:
  proxy:
    external: true
  appnet:
    external: true

services:
  toolshub:
    build:
      context: .
      dockerfile: ./Dockerfile
      # ❌ remove: target: builder  (we want the final image, not the builder)
      args:
        NEXT_PUBLIC_SITE_URL: ${NEXT_PUBLIC_SITE_URL}
        DATABASE_URL: ${DATABASE_URL}
    container_name: toolshub

    env_file:
      - ./.env
    environment:
      - NODE_ENV=production
      - PORT=3005
      - NEXT_TELEMETRY_DISABLED=1
      - DATABASE_URL=${DATABASE_URL}

    # Traefik will use the internal port via labels; expose is fine
    expose:
      - "3005"

    restart: unless-stopped
    networks:
      - proxy
      - appnet

    # ❌ remove this; it overrides your Dockerfile CMD
    # command: ["npx", "prisma", "migrate", "deploy"]

    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=proxy"
      - "traefik.http.routers.toolshub.rule=Host(`toolshub.tariqul.dev`)"
      - "traefik.http.routers.toolshub.entrypoints=websecure"
      - "traefik.http.routers.toolshub.tls=true"
      - "traefik.http.routers.toolshub.tls.certresolver=letsencrypt"
      - "traefik.http.routers.toolshub.service=toolshub-svc"
      - "traefik.http.services.toolshub-svc.loadbalancer.server.port=3005"
      - "traefik.http.services.toolshub-svc.loadbalancer.passhostheader=true"
      - "traefik.http.routers.toolshub-www.rule=Host(`www.toolshub.tariqul.dev`)"
      - "traefik.http.routers.toolshub-www.entrypoints=websecure"
      - "traefik.http.routers.toolshub-www.tls=true"
      - "traefik.http.routers.toolshub-www.tls.certresolver=letsencrypt"
      - "traefik.http.routers.toolshub-www.middlewares=toolshub-redirect@docker"
      - "traefik.http.middlewares.toolshub-redirect.redirectregex.regex=^https?://www\\.toolshub\\.tariqul\\.dev(.*)"
      - "traefik.http.middlewares.toolshub-redirect.redirectregex.replacement=https://toolshub.tariqul.dev$1"
      - "traefik.http.middlewares.toolshub-redirect.redirectregex.permanent=true"

  # One-off migration runner (use builder stage where Prisma CLI exists)
  migrate:
    build:
      context: .
      dockerfile: ./Dockerfile
      target: builder
      args:
        NEXT_PUBLIC_SITE_URL: ${NEXT_PUBLIC_SITE_URL}
        DATABASE_URL: ${DATABASE_URL}
    env_file:
      - ./.env
    environment:
      - DATABASE_URL=${DATABASE_URL}
    networks:
      - appnet
    command: ["npx", "prisma", "migrate", "deploy"]
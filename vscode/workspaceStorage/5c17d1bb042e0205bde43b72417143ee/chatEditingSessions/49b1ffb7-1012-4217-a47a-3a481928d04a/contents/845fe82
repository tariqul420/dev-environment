"use server";

import { OrderStatus } from "@prisma/client";
import logger from "../logger";
import { prisma } from "../prisma";
import { requiredUser, userId } from "../utils/auth";

export async function getCustomerOrdersReport() {
  try {
    await requiredUser();
    const id = await userId();

    if (!id) {
      throw new Error("User ID not found");
    }

    // Get all orders for the customer
    const orders = await prisma.order.findMany({
      where: { userId: id },
      select: { status: true },
    });

    // Calculate statistics
    const totalOrders = orders.length;
    const deliveredOrders = orders.filter(
      (order) =>
        order.status === OrderStatus.DELIVERED ||
        order.status === OrderStatus.CONFIRMED,
    ).length;
    const cancelledOrders = orders.filter(
      (order) => order.status === OrderStatus.CANCELLED,
    ).length;
    const ongoingOrders = orders.filter(
      (order) =>
        order.status !== OrderStatus.DELIVERED &&
        order.status !== OrderStatus.CONFIRMED &&
        order.status !== OrderStatus.CANCELLED,
    ).length;

    return {
      totalOrders,
      deliveredOrders,
      ongoingOrders,
      cancelledOrders,
    };
  } catch (error) {
    logger.error(
      "Error fetching customer order report: " +
        (error instanceof Error ? error.message : String(error)),
    );
    throw new Error("Failed to fetch customer order report");
  }
};

export async function getCustomerProfile() {
  try {
    await requiredUser();
    const id = await userId();

    if (!id) {
      throw new Error("User ID not found");
    }

    const user = await prisma.user.findUnique({
      where: { id },
      select: {
        name: true,
        email: true,
        phone: true,
        imageUrl: true,
        role: true,
        createdAt: true,
      },
    });

    if (!user) {
      throw new Error("User not found");
    }

    // Calculate total spent
    const orders = await prisma.order.findMany({
      where: { 
        userId: id,
        status: { in: [OrderStatus.DELIVERED, OrderStatus.CONFIRMED] }
      },
      select: { total: true },
    });

    const totalSpent = orders.reduce((sum, order) => {
      return sum + Number(order.total);
    }, 0);

    return {
      ...user,
      totalSpent: totalSpent.toLocaleString("bn-BD"),
    };
  } catch (error) {
    logger.error(
      "Error fetching customer profile: " +
        (error instanceof Error ? error.message : String(error)),
    );
    throw new Error("Failed to fetch customer profile");
  }
}

export async function getCustomerSpendingSummary() {
  try {
    await requiredUser();
    const id = await userId();

    if (!id) {
      throw new Error("User ID not found");
    }

    const now = new Date();
    const startOfMonth = new Date(now.getFullYear(), now.getMonth(), 1);
    const startOfLastMonth = new Date(now.getFullYear(), now.getMonth() - 1, 1);
    const endOfLastMonth = new Date(now.getFullYear(), now.getMonth(), 0);

    // Get all completed orders
    const [allOrders, monthlyOrders] = await Promise.all([
      prisma.order.findMany({
        where: { 
          userId: id,
          status: { in: [OrderStatus.DELIVERED, OrderStatus.CONFIRMED] }
        },
        select: { total: true },
      }),
      prisma.order.findMany({
        where: { 
          userId: id,
          status: { in: [OrderStatus.DELIVERED, OrderStatus.CONFIRMED] },
          createdAt: { gte: startOfMonth }
        },
        select: { total: true },
      }),
    ]);

    const totalSpent = allOrders.reduce((sum, order) => sum + Number(order.total), 0);
    const monthlySpent = monthlyOrders.reduce((sum, order) => sum + Number(order.total), 0);
    const averageOrderValue = allOrders.length > 0 ? totalSpent / allOrders.length : 0;

    return {
      totalSpent,
      monthlySpent,
      averageOrderValue,
    };
  } catch (error) {
    logger.error(
      "Error fetching spending summary: " +
        (error instanceof Error ? error.message : String(error)),
    );
    throw new Error("Failed to fetch spending summary");
  }
}

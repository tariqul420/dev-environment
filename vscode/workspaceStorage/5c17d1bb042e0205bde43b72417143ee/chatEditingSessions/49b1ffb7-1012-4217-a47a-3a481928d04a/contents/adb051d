export const dynamic = "force-dynamic";

import type { Decimal } from "@prisma/client/runtime/library";
import { format } from "date-fns";
import {
  CheckCircle2,
  CreditCard,
  HandHelping,
  MapPin,
  Package,
  Phone,
  Truck,
} from "lucide-react";

// Type definitions for better type safety
interface OrderItem {
  id: string;
  title: string;
  qty: number;
  unitPrice: Decimal;
  total: Decimal;
  product?: {
    images?: { url: string }[];
    packageDuration?: string;
  };
}
import Link from "next/link";
import NotFound from "@/app/not-found";
import PurchaseTracking from "@/components/analytics/purchase-tracking";
import { OrderReceipt } from "@/components/root/recept/order-receipt-button";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import {
  Card,
  CardContent,
  CardFooter,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Separator } from "@/components/ui/separator";
import { getOrderReceipt } from "@/lib/actions/order.action";
import getStatusIcon, {
  getStatusColorClass,
  getStatusLabel,
} from "@/lib/utils/status";

const bdt = (n: number | Decimal) =>
  `৳${Number(n ?? 0).toLocaleString("en-BD")}`;

function Steps({ status }: { status: string }) {
  const ORDER_STEPS = [
    "PENDING",
    "HOLD",
    "CONFIRMED",
    "PROCESSING",
    "SHIPPED",
    "DELIVERED",
  ] as const;
  const idx = Math.max(
    0,
    ORDER_STEPS.indexOf(
      (status || "").toUpperCase() as (typeof ORDER_STEPS)[number],
    ),
  );

  if ((status || "").toUpperCase() === "CANCELLED") {
    return (
      <div className="flex flex-wrap items-center gap-2">
        <Badge className="bg-red-500/10 text-red-600 dark:text-red-400">
          Cancelled
        </Badge>
        <span className="text-muted-foreground text-xs">
          Your order has been cancelled.
        </span>
      </div>
    );
  }

  return (
    <div className="flex flex-wrap items-center gap-2">
      {ORDER_STEPS.map((s, i) => (
        <div key={s} className="flex items-center gap-2">
          <Badge
            variant="outline"
            className={`capitalize ${i <= idx ? "bg-primary/10 border-primary/40 text-primary" : "text-muted-foreground"}`}
          >
            {s.toLowerCase()}
          </Badge>
          {i < ORDER_STEPS.length - 1 && (
            <div
              className={`h-[1px] w-6 ${i < idx ? "bg-primary/50" : "bg-border"}`}
            />
          )}
        </div>
      ))}
    </div>
  );
}

const HEADER_COPY: Record<string, { title: string; desc: string }> = {
  PENDING: {
    title: "অর্ডার গ্রহণ করা হয়েছে",
    desc: "আপনার অর্ডারটি পেয়েছি। খুব শিগগিরই যাচাই করে নিশ্চিত করা হবে, ইনশা-আল্লাহ।",
  },
  HOLD: {
    title: "অর্ডার হোল্ডে আছে",
    desc: "কিছু তথ্য নিশ্চিত করতে সাময়িকভাবে হোল্ডে রাখা হয়েছে। আমাদের টিম যোগাযোগ করবে।",
  },
  CONFIRMED: {
    title: "অর্ডার নিশ্চিত করা হয়েছে",
    desc: "আপনার অর্ডারটি সফলভাবে গ্রহণ করা হয়েছে। খুব শিগগিরই ডেলিভারির জন্য প্রসেস করা হবে, ইনশা-আল্লাহ।",
  },
  PROCESSING: {
    title: "অর্ডার প্রসেসিং চলছে",
    desc: "প্যাকেজিং ও কোয়ালিটি চেক চলছে। অল্প সময়ের মধ্যেই কুরিয়ারে হস্তান্তর করা হবে।",
  },
  SHIPPED: {
    title: "অর্ডার পথে রয়েছে",
    desc: "অর্ডারটি কুরিয়ারে দেওয়া হয়েছে। ডেলিভারি আপডেট খুব শিগগিরই পাবেন।",
  },
  DELIVERED: {
    title: "অর্ডার ডেলিভারি সম্পন্ন",
    desc: "আলহামদুলিল্লাহ, প্রোডাক্টটি পৌঁছে গেছে। ব্যবহার শেষে আপনার মতামত জানাতে ভুলবেন না!",
  },
  CANCELLED: {
    title: "অর্ডার বাতিল হয়েছে",
    desc: "আপনার অর্ডারটি বাতিল করা হয়েছে। যদি এটি ভুলবশত হয়ে থাকে, অনুগ্রহ করে 09647-001177 নম্বরে যোগাযোগ করুন।",
  },
  DEFAULT: {
    title: "অর্ডার আপডেট",
    desc: "আপনার অর্ডারের স্ট্যাটাস আপডেট হয়েছে। বিস্তারিত নিচে দেখুন।",
  },
};

function getHeaderCopy(status?: string) {
  const key = (status || "").toUpperCase();
  return HEADER_COPY[key] ?? HEADER_COPY.DEFAULT;
}


export default async function ReceiptPage({
  params,
}: {
  params: Promise<{ id: string }>;
}) {
  const { id } = await params;
  const [phone, ...rest] = id.split("-");
  const orderNo = rest.join("-");

  if (!phone || !orderNo) return <NotFound />;

  const order = await getOrderReceipt(phone, orderNo);
  if (!order) return <NotFound />;

  const {
    customerName,
    customerPhone,
    shippingAddress,
    orderNote,
    referral,
    createdAt,
    status,
    paymentMethod,
    subtotal,
    shippingTotal,
    total,
    items,
    orderNo: ono,
    statusUpdatedBy,
    statusUpdatedAt,
  } = order;

    const { title, desc } = getHeaderCopy(status);

  return (
    <main className="py-10">
      <PurchaseTracking
        product={{
          ...order,
          total: Number(order.total),
          items: order.items.map((it: OrderItem) => ({
            ...it,
            unitPrice: Number(it.unitPrice),
            total: Number(it.total),
          })),
        }}
      />

      {/* Header */}
      <div className="bg-primary/5 relative overflow-hidden rounded-lg border">
        <div className="bg-primary/10 absolute -top-8 -left-8 h-24 w-24 rotate-12 rounded-full" />
        <div className="bg-primary/10 absolute -bottom-10 -right-10 h-28 w-28 -rotate-12 rounded-full" />

        <div className="relative flex flex-col items-center gap-2 px-6 pb-8 pt-8 text-center">
          <div className="bg-background shadow-lg mb-2 flex h-20 w-20 items-center justify-center rounded-full">
            <CheckCircle2 className="text-primary h-10 w-10" />
          </div>
          <h1 className="text-3xl font-bold">{title}</h1>
          <p className="text-muted-foreground max-w-2xl">{desc}</p>

          <div className="mt-2 flex flex-wrap items-center justify-center gap-2">
            <Badge
              variant="outline"
              className={`capitalize ${getStatusColorClass(status)}`}
            >
              {status.toLowerCase()}
            </Badge>
            <span className="text-muted-foreground text-xs">
              Order No: <span className="font-medium">{ono}</span>
            </span>
            <span className="text-muted-foreground text-xs">
              Date:{" "}
              <span className="font-medium">
                {format(new Date(createdAt), "PPP p")}
              </span>
            </span>
          </div>

          <div className="mt-4">
            <Steps status={status} />
          </div>

          <div className="mt-4 flex flex-wrap items-center justify-center gap-3">
            <Button asChild variant="default" className="gap-2">
              <a
                href="https://www.facebook.com/naturalsefabd"
                target="_blank"
                rel="noopener noreferrer"
              >
                ফেসবুক পেজ
              </a>
            </Button>
            <Button asChild variant="default" className="gap-2">
              <a
                href="https://chat.whatsapp.com/G62FiyRWJnN8zSvNhfmMhY"
                target="_blank"
                rel="noopener noreferrer"
              >
                হোয়াটসঅ্যাপ গ্রুপ
              </a>
            </Button>
            <OrderReceipt
              order={{
                ...order,
                subtotal: Number(order.subtotal),
                shippingTotal: Number(order.shippingTotal),
                total: Number(order.total),
                items: order.items.map((it) => ({
                  ...it,
                  unitPrice: Number(it.unitPrice),
                  total: Number(it.total),
                })),
              }}
            />
          </div>
        </div>
      </div>

      <div className="mt-8 grid gap-6 md:grid-cols-2">
        {/* Order details */}
        <Card className="bg-card/50">
          <CardHeader className="pb-2">
            <div className="flex items-center gap-2">
              <Package className="text-primary h-5 w-5" />
              <CardTitle className="text-lg">Order Details</CardTitle>
            </div>
          </CardHeader>
          <CardContent className="space-y-3">
            <div className="flex justify-between">
              <span>Order No</span>
              <span className="font-medium">{ono}</span>
            </div>
            <div className="flex justify-between">
              <span>Placed on</span>
              <span className="font-medium">
                {format(new Date(createdAt), "PPP p")}
              </span>
            </div>
            <div className="flex justify-between">
              <span>Payment</span>
              <span className="font-medium capitalize">
                {String(paymentMethod || "COD").toLowerCase() === "cod"
                  ? "Cash on Delivery"
                  : String(paymentMethod).toLowerCase()}
              </span>
            </div>
            <div className="flex justify-between">
              <span>Status</span>
              <Badge
                variant="outline"
                title={getStatusLabel(status)}
                className={`px-1.5 capitalize ${getStatusColorClass(status)}`}
              >
                {getStatusIcon(status)}
                {getStatusLabel(status)}
              </Badge>
            </div>
            {statusUpdatedBy?.name && (
              <div className="flex justify-between">
                <span>Last update by</span>
                <span className="font-medium">
                  {statusUpdatedBy.name}
                  {statusUpdatedAt
                    ? ` • ${format(new Date(statusUpdatedAt), "PPP p")}`
                    : ""}
                </span>
              </div>
            )}
          </CardContent>
        </Card>

        {/* Shipping */}
        <Card className="bg-card/50">
          <CardHeader className="pb-2">
            <div className="flex items-center gap-2">
              <Truck className="text-primary h-5 w-5" />
              <CardTitle className="text-lg">Shipping Information</CardTitle>
            </div>
          </CardHeader>
          <CardContent className="space-y-3">
            <div className="flex items-center justify-between gap-3">
              <span>Name</span>
              <span className="font-medium">{customerName}</span>
            </div>
            <div className="flex items-center justify-between gap-3">
              <span>Phone</span>
              <span className="font-medium flex items-center gap-2">
                <Phone className="h-4 w-4 opacity-70" />
                <Link href={`tel:${customerPhone}`}>{customerPhone}</Link>
              </span>
            </div>
            <div className="flex items-start justify-between gap-3">
              <span>Address</span>
              <span className="font-medium inline-flex items-start gap-2 text-right">
                <MapPin className="mt-0.5 h-4 w-4 opacity-70" />
                <span className="max-w-[22rem]">{shippingAddress}</span>
              </span>
            </div>
            {referral && (
              <div className="flex items-center justify-between gap-3">
                <span>Referral</span>
                <span className="font-medium inline-flex items-center gap-2">
                  <HandHelping className="h-4 w-4 opacity-70" />
                  {referral}
                </span>
              </div>
            )}
            {orderNote && (
              <div className="flex items-start justify-between gap-3">
                <span>Note</span>
                <span className="font-medium max-w-[22rem] text-right">
                  {orderNote}
                </span>
              </div>
            )}
          </CardContent>
        </Card>
      </div>

      {/* Items */}
      <Card className="mt-6 bg-card/50">
        <CardHeader className="pb-2">
          <div className="flex items-center gap-2">
            <CreditCard className="text-primary h-5 w-5" />
            <CardTitle className="text-lg">Order Summary</CardTitle>
          </div>
        </CardHeader>

        <CardContent className="space-y-4">
          <div className="rounded-md border">
            <div className="grid grid-cols-12 border-b bg-muted/30 px-3 py-2 text-xs font-medium">
              <div className="col-span-6">Product</div>
              <div className="col-span-2 text-right">Qty</div>
              <div className="col-span-2 text-right">Unit</div>
              <div className="col-span-2 text-right">Total</div>
            </div>

            {items.map((it) => {
              const img = it.product?.images?.[0]?.url;
              const label = it.product?.packageDuration
                ? `${it.title} (${it.product.packageDuration})`
                : it.title;

              return (
                <div
                  key={it.id}
                  className="grid grid-cols-12 items-center px-3 py-2 text-sm"
                >
                  <div className="col-span-6 flex items-center gap-2">
                    <div className="relative h-10 w-10 overflow-hidden rounded-md bg-muted">
                      {img ? (
                        // biome-ignore lint/performance/noImgElement: <>
                        <img
                          src={img}
                          alt={it.title}
                          className="w-full h-full rounded object-cover ring-1 ring-border"
                        />
                      ) : (
                        <div className="h-full w-full" />
                      )}
                    </div>
                    <span className="line-clamp-2">{label}</span>
                  </div>
                  <div className="col-span-2 text-right">{it.qty}</div>
                  <div className="col-span-2 text-right">
                    {bdt(it.unitPrice)}
                  </div>
                  <div className="col-span-2 text-right">{bdt(it.total)}</div>
                </div>
              );
            })}
          </div>

          <Separator />

          <div className="space-y-2">
            <div className="flex items-center justify-between">
              <span>Subtotal</span>
              <span className="font-medium">{bdt(subtotal)}</span>
            </div>
            <div className="flex items-center justify-between">
              <span>Shipping</span>
              <span className="font-medium">{bdt(shippingTotal)}</span>
            </div>
          </div>

          <Separator />

          <div className="bg-primary/10 flex items-center justify-between rounded-lg p-3">
            <span className="font-semibold">Total Amount</span>
            <span className="text-primary text-lg font-bold">{bdt(total)}</span>
          </div>
        </CardContent>

        <CardFooter className="flex flex-wrap justify-between gap-3">
          <Button asChild variant="outline">
            <Link href="/products">Continue Shopping</Link>
          </Button>

          <div className="text-muted-foreground text-xs">
            Need help? Call us at{" "}
            <Link href="tel:+8809647001177" className="underline">
              09647-001177
            </Link>
          </div>
        </CardFooter>
      </Card>
    </main>
  );
}
